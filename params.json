{"name":"Nodejscs","tagline":"Demonstration of how to use DuoCode to build a NodeJs webb app with C#","body":"# NodeJsSc\r\nDemonstration of how to use DuoCode to build a NodeJs webb app with C#\r\n\r\n### Requirements:\r\n- Visual Studio 2015 Community (free) https://www.visualstudio.com/en-us/features/node-js-vs.aspx\r\n- DuoCode http://duoco.de/download\r\n- NodeToolsForVisualStudio https://github.com/Microsoft/nodejstools\r\n\r\n### Description:\r\nSolution contains 2 projects: NodeServer and ServerJsSc.\r\n* ServerJsSc: is the main logic of the node app. It imports npm modules, defines routes and starts the server. When compiled, it's output (\"server.js\") is put in \"NodeServer\\server\" folder.\r\n* NodeServer: is the Node (by NodeToolsVS) itself. It loads \"server.js\" (the output of ServerJsCs) and runs it. This is where you put your views, npm modules and static content.\r\n\r\n### Setup & Run:\r\n1. npm install\r\n2. restore nuget packages\r\n3. F5 in VS or \"node server\\server.js\"\r\n\r\n### Debugging straight from Visual Studio:\r\n![image](https://cloud.githubusercontent.com/assets/246724/11441618/9d8d9142-9516-11e5-98c3-8a6136c3ea13.png)\r\n\r\n### Actuall page in browser, run by node:\r\n![image](https://cloud.githubusercontent.com/assets/246724/11441565/f985ccb8-9515-11e5-8bfb-39097ead37fd.png)\r\n\r\n### Future:\r\nMust of the code is used with \"dynamic\" due to lack of C# definitions of npm modules. Unfortunately DuoCode is not popuplar as Typescript is, therefore there are no definitions available yet.\r\nSo the plan is to add some definitions, or even create a repository just like https://github.com/DefinitelyTyped/DefinitelyTyped.\r\nAlso add angular module and controllers to the pages directly with c#.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}